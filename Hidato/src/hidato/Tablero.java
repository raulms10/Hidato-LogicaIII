/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hidato;

import java.util.ArrayList;
import java.util.Random;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lis
 */
public class Tablero extends javax.swing.JFrame {
    
    public int filas = 4;
    public int columnas = 4;
    public int dificultad = 2;
    
    
    DefaultTableModel modelTablero;
    
    
    /**
     * Creates new form Tablero
     */
    public Tablero() {
        initComponents();
        generarTablero();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTablero = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableTablero.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTableTablero);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(78, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableTablero;
    // End of variables declaration//GEN-END:variables
    
    private void creeTablero(){
        int fRandom = new Random().nextInt(filas);
        int cRandom = new Random().nextInt(columnas);
        System.out.println("Valor: " + fRandom + " " + cRandom);
        Nodo n = new Nodo(1, fRandom, cRandom);
        //Nodo n = new Nodo(1, 0, 0);
        busqueSolucion(n);
        
    }
    
    private void generarTablero() {
        modelTablero = new DefaultTableModel(filas, columnas);
        jTableTablero.setModel(modelTablero);
        jTableTablero.getTableHeader().setUI(null);
        creeTablero();
    }
    
    private void imprimirNodos(ArrayList<Nodo> lista){
        for(Nodo n: lista){
            System.out.println("Valor: " + n.getNumero() + " F: " + n.getFila() + " C: " + n.getColumna());
        }
    }
    
    public boolean esValidoVecino(Nodo n){
        return !calculeVecinos(n).isEmpty() || n.getNumero() >= filas*columnas;
    }

    private void busqueSolucion(Nodo nodo) {
        ArrayList<Nodo> vecinos = calculeVecinos(nodo);
        //imprimirNodos(vecinos);
        for(Nodo v: vecinos){
            if(esValidoVecino(v)){
                //modelTablero.setValueAt(v, ERROR, columnas); escriba(nodo)
            }
            
        }
        
    }

    private ArrayList<Nodo> calculeVecinos(Nodo nodo) {
        ArrayList<Nodo> v = new ArrayList<Nodo>();
        int f = nodo.getFila(); int c = nodo.getColumna();
        for(int i = f-1; i <= f+1; i++){
            for(int j = c-1; j <= c+1; j++){
                if((i >= 0 && j >= 0 && i < filas && j < columnas) && (i != f || j != c)){
                    if(modelTablero.getValueAt(i, j) == null){
                        v.add(new Nodo(nodo.getNumero()+1, i, j));
                    }
                }
            }
        }
        return v;
    }
}
